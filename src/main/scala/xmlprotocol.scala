// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.smop.oai
    
/**
usage:
import scalaxb._
import Scalaxb._
import org.smop.oai._
import DefaultXMLProtocol._

val obj = fromXML[Foo](node)
val document = toXML[Foo](obj, "foo", defaultScope)
**/
trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val OaiOAIPMHtypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHtype] = buildOaiOAIPMHtypeFormat
  def buildOaiOAIPMHtypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHtype]

  implicit lazy val OaiRequestTypeFormat: scalaxb.XMLFormat[org.smop.oai.RequestType] = buildOaiRequestTypeFormat
  def buildOaiRequestTypeFormat: scalaxb.XMLFormat[org.smop.oai.RequestType]

  implicit lazy val OaiVerbTypeFormat: scalaxb.XMLFormat[org.smop.oai.VerbType] = buildOaiVerbTypeFormat
  def buildOaiVerbTypeFormat: scalaxb.XMLFormat[org.smop.oai.VerbType]

  implicit lazy val OaiOAIPMHerrorTypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorType] = buildOaiOAIPMHerrorTypeFormat
  def buildOaiOAIPMHerrorTypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorType]

  implicit lazy val OaiOAIPMHerrorcodeTypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorcodeType] = buildOaiOAIPMHerrorcodeTypeFormat
  def buildOaiOAIPMHerrorcodeTypeFormat: scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorcodeType]

  implicit lazy val OaiIdentifyTypeFormat: scalaxb.XMLFormat[org.smop.oai.IdentifyType] = buildOaiIdentifyTypeFormat
  def buildOaiIdentifyTypeFormat: scalaxb.XMLFormat[org.smop.oai.IdentifyType]

  implicit lazy val OaiListMetadataFormatsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListMetadataFormatsType] = buildOaiListMetadataFormatsTypeFormat
  def buildOaiListMetadataFormatsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListMetadataFormatsType]

  implicit lazy val OaiListSetsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListSetsType] = buildOaiListSetsTypeFormat
  def buildOaiListSetsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListSetsType]

  implicit lazy val OaiGetRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.GetRecordType] = buildOaiGetRecordTypeFormat
  def buildOaiGetRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.GetRecordType]

  implicit lazy val OaiListRecordsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListRecordsType] = buildOaiListRecordsTypeFormat
  def buildOaiListRecordsTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListRecordsType]

  implicit lazy val OaiListIdentifiersTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListIdentifiersType] = buildOaiListIdentifiersTypeFormat
  def buildOaiListIdentifiersTypeFormat: scalaxb.XMLFormat[org.smop.oai.ListIdentifiersType]

  implicit lazy val OaiRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.RecordType] = buildOaiRecordTypeFormat
  def buildOaiRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.RecordType]

  implicit lazy val OaiHeaderTypeFormat: scalaxb.XMLFormat[org.smop.oai.HeaderType] = buildOaiHeaderTypeFormat
  def buildOaiHeaderTypeFormat: scalaxb.XMLFormat[org.smop.oai.HeaderType]

  implicit lazy val OaiStatusTypeFormat: scalaxb.XMLFormat[org.smop.oai.StatusType] = buildOaiStatusTypeFormat
  def buildOaiStatusTypeFormat: scalaxb.XMLFormat[org.smop.oai.StatusType]

  implicit lazy val OaiMetadataTypeFormat: scalaxb.XMLFormat[org.smop.oai.MetadataType] = buildOaiMetadataTypeFormat
  def buildOaiMetadataTypeFormat: scalaxb.XMLFormat[org.smop.oai.MetadataType]

  implicit lazy val OaiAboutTypeFormat: scalaxb.XMLFormat[org.smop.oai.AboutType] = buildOaiAboutTypeFormat
  def buildOaiAboutTypeFormat: scalaxb.XMLFormat[org.smop.oai.AboutType]

  implicit lazy val OaiResumptionTokenTypeFormat: scalaxb.XMLFormat[org.smop.oai.ResumptionTokenType] = buildOaiResumptionTokenTypeFormat
  def buildOaiResumptionTokenTypeFormat: scalaxb.XMLFormat[org.smop.oai.ResumptionTokenType]

  implicit lazy val OaiDescriptionTypeFormat: scalaxb.XMLFormat[org.smop.oai.DescriptionType] = buildOaiDescriptionTypeFormat
  def buildOaiDescriptionTypeFormat: scalaxb.XMLFormat[org.smop.oai.DescriptionType]

  implicit lazy val OaiProtocolVersionTypeFormat: scalaxb.XMLFormat[org.smop.oai.ProtocolVersionType] = buildOaiProtocolVersionTypeFormat
  def buildOaiProtocolVersionTypeFormat: scalaxb.XMLFormat[org.smop.oai.ProtocolVersionType]

  implicit lazy val OaiDeletedRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.DeletedRecordType] = buildOaiDeletedRecordTypeFormat
  def buildOaiDeletedRecordTypeFormat: scalaxb.XMLFormat[org.smop.oai.DeletedRecordType]

  implicit lazy val OaiGranularityTypeFormat: scalaxb.XMLFormat[org.smop.oai.GranularityType] = buildOaiGranularityTypeFormat
  def buildOaiGranularityTypeFormat: scalaxb.XMLFormat[org.smop.oai.GranularityType]

  implicit lazy val OaiMetadataFormatTypeFormat: scalaxb.XMLFormat[org.smop.oai.MetadataFormatType] = buildOaiMetadataFormatTypeFormat
  def buildOaiMetadataFormatTypeFormat: scalaxb.XMLFormat[org.smop.oai.MetadataFormatType]

  implicit lazy val OaiSetTypeFormat: scalaxb.XMLFormat[org.smop.oai.SetType] = buildOaiSetTypeFormat
  def buildOaiSetTypeFormat: scalaxb.XMLFormat[org.smop.oai.SetType]

  
}

object DefaultXMLProtocol extends DefaultXMLProtocol with scalaxb.DefaultXMLStandardTypes {
  import scalaxb.Scalaxb._
  val defaultScope = toScope(None -> "http://www.openarchives.org/OAI/2.0/",
    Some("oai") -> "http://www.openarchives.org/OAI/2.0/",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")  
}

trait DefaultXMLProtocol extends XMLProtocol {
  import scalaxb.Scalaxb._

  override def buildOaiOAIPMHtypeFormat = new DefaultOaiOAIPMHtypeFormat {}
  trait DefaultOaiOAIPMHtypeFormat extends scalaxb.ElemNameParser[org.smop.oai.OAIPMHtype] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("OAI-PMHtype")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.OAIPMHtype] =
      (scalaxb.ElemName(targetNamespace, "responseDate")) ~ 
      (scalaxb.ElemName(targetNamespace, "request")) ~ 
      rep(((scalaxb.ElemName(targetNamespace, "error")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.OAIPMHerrorType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "Identify")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.IdentifyType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "ListMetadataFormats")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.ListMetadataFormatsType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "ListSets")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.ListSetsType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "GetRecord")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.GetRecordType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "ListIdentifiers")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.ListIdentifiersType](x)))) | 
      ((scalaxb.ElemName(targetNamespace, "ListRecords")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), fromXML[org.smop.oai.ListRecordsType](x))))) ^^
      { case p1 ~ p2 ~ p3 =>
      org.smop.oai.OAIPMHtype(fromXML[javax.xml.datatype.XMLGregorianCalendar](p1),
        fromXML[org.smop.oai.RequestType](p2),
        p3.toSeq) }
    
    def writesChildNodes(__obj: org.smop.oai.OAIPMHtype, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.responseDate, None, Some("responseDate"), __scope, false),
        toXML[org.smop.oai.RequestType](__obj.request, None, Some("request"), __scope, false),
        __obj.oaipmhtypeoption flatMap { x => toXML[scalaxb.DataRecord[org.smop.oai.OAIPMHtypeOption]](x, x.namespace, x.key, __scope, false) })

  }

  override def buildOaiRequestTypeFormat = new DefaultOaiRequestTypeFormat {}
  trait DefaultOaiRequestTypeFormat extends scalaxb.XMLFormat[org.smop.oai.RequestType] with scalaxb.CanWriteChildNodes[org.smop.oai.RequestType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.RequestType] = seq match {
      case node: scala.xml.Node => Right(org.smop.oai.RequestType(fromXML[java.net.URI](scala.xml.Text(node.text.trim)),
        (node \ "@verb").headOption map { fromXML[org.smop.oai.VerbType](_) },
        (node \ "@identifier").headOption map { fromXML[java.net.URI](_) },
        (node \ "@metadataPrefix").headOption map { fromXML[String](_) },
        (node \ "@from").headOption map { fromXML[String](_) },
        (node \ "@until").headOption map { fromXML[String](_) },
        (node \ "@set").headOption map { fromXML[String](_) },
        (node \ "@resumptionToken").headOption map { fromXML[String](_) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.smop.oai.RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.verb foreach { x => attr = scala.xml.Attribute(null, "verb", x.toString, attr) }
      __obj.identifier foreach { x => attr = scala.xml.Attribute(null, "identifier", x.toString, attr) }
      __obj.metadataPrefix foreach { x => attr = scala.xml.Attribute(null, "metadataPrefix", x.toString, attr) }
      __obj.from foreach { x => attr = scala.xml.Attribute(null, "from", x.toString, attr) }
      __obj.until foreach { x => attr = scala.xml.Attribute(null, "until", x.toString, attr) }
      __obj.set foreach { x => attr = scala.xml.Attribute(null, "set", x.toString, attr) }
      __obj.resumptionToken foreach { x => attr = scala.xml.Attribute(null, "resumptionToken", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.smop.oai.RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildOaiVerbTypeFormat = new DefaultOaiVerbTypeFormat {}
  trait DefaultOaiVerbTypeFormat extends scalaxb.XMLFormat[org.smop.oai.VerbType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.VerbType] = Right(org.smop.oai.VerbType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.VerbType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  override def buildOaiOAIPMHerrorTypeFormat = new DefaultOaiOAIPMHerrorTypeFormat {}
  trait DefaultOaiOAIPMHerrorTypeFormat extends scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorType] with scalaxb.CanWriteChildNodes[org.smop.oai.OAIPMHerrorType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.OAIPMHerrorType] = seq match {
      case node: scala.xml.Node => Right(org.smop.oai.OAIPMHerrorType(fromXML[String](node),
        fromXML[org.smop.oai.OAIPMHerrorcodeType]((node \ "@code"))))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.smop.oai.OAIPMHerrorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "code", __obj.code.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.smop.oai.OAIPMHerrorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildOaiOAIPMHerrorcodeTypeFormat = new DefaultOaiOAIPMHerrorcodeTypeFormat {}
  trait DefaultOaiOAIPMHerrorcodeTypeFormat extends scalaxb.XMLFormat[org.smop.oai.OAIPMHerrorcodeType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.OAIPMHerrorcodeType] = Right(org.smop.oai.OAIPMHerrorcodeType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.OAIPMHerrorcodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  override def buildOaiIdentifyTypeFormat = new DefaultOaiIdentifyTypeFormat {}
  trait DefaultOaiIdentifyTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.IdentifyType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("IdentifyType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.IdentifyType] =
      (scalaxb.ElemName(targetNamespace, "repositoryName")) ~ 
      (scalaxb.ElemName(targetNamespace, "baseURL")) ~ 
      (scalaxb.ElemName(targetNamespace, "protocolVersion")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "adminEmail")) ~ 
      (scalaxb.ElemName(targetNamespace, "earliestDatestamp")) ~ 
      (scalaxb.ElemName(targetNamespace, "deletedRecord")) ~ 
      (scalaxb.ElemName(targetNamespace, "granularity")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "compression")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.smop.oai.IdentifyType(fromXML[String](p1),
        fromXML[java.net.URI](p2),
        fromXML[org.smop.oai.ProtocolVersionType](p3),
        p4.toSeq map { fromXML[String](_) },
        fromXML[String](p5),
        fromXML[org.smop.oai.DeletedRecordType](p6),
        fromXML[org.smop.oai.GranularityType](p7),
        p8.toSeq map { fromXML[String](_) },
        p9.toSeq map { fromXML[org.smop.oai.DescriptionType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.IdentifyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[String](__obj.repositoryName, None, Some("repositoryName"), __scope, false),
        toXML[java.net.URI](__obj.baseURL, None, Some("baseURL"), __scope, false),
        toXML[org.smop.oai.ProtocolVersionType](__obj.protocolVersion, None, Some("protocolVersion"), __scope, false),
        __obj.adminEmail flatMap { toXML[String](_, None, Some("adminEmail"), __scope, false) },
        toXML[String](__obj.earliestDatestamp, None, Some("earliestDatestamp"), __scope, false),
        toXML[org.smop.oai.DeletedRecordType](__obj.deletedRecord, None, Some("deletedRecord"), __scope, false),
        toXML[org.smop.oai.GranularityType](__obj.granularity, None, Some("granularity"), __scope, false),
        __obj.compression flatMap { toXML[String](_, None, Some("compression"), __scope, false) },
        __obj.description flatMap { toXML[org.smop.oai.DescriptionType](_, None, Some("description"), __scope, false) })

  }

  override def buildOaiListMetadataFormatsTypeFormat = new DefaultOaiListMetadataFormatsTypeFormat {}
  trait DefaultOaiListMetadataFormatsTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.ListMetadataFormatsType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("ListMetadataFormatsType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.ListMetadataFormatsType] =
      rep(scalaxb.ElemName(targetNamespace, "metadataFormat")) ^^
      { case p1 =>
      org.smop.oai.ListMetadataFormatsType(p1.toSeq map { fromXML[org.smop.oai.MetadataFormatType](_) }: _*) }
    
    def writesChildNodes(__obj: org.smop.oai.ListMetadataFormatsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.metadataFormat flatMap { toXML[org.smop.oai.MetadataFormatType](_, None, Some("metadataFormat"), __scope, false) })

  }

  override def buildOaiListSetsTypeFormat = new DefaultOaiListSetsTypeFormat {}
  trait DefaultOaiListSetsTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.ListSetsType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("ListSetsType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.ListSetsType] =
      rep(scalaxb.ElemName(targetNamespace, "set")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "resumptionToken")) ^^
      { case p1 ~ p2 =>
      org.smop.oai.ListSetsType(p1.toSeq map { fromXML[org.smop.oai.SetType](_) },
        p2.headOption map { fromXML[org.smop.oai.ResumptionTokenType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.ListSetsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.set flatMap { toXML[org.smop.oai.SetType](_, None, Some("set"), __scope, false) },
        __obj.resumptionToken map { toXML[org.smop.oai.ResumptionTokenType](_, None, Some("resumptionToken"), __scope, false) } getOrElse {Nil})

  }

  override def buildOaiGetRecordTypeFormat = new DefaultOaiGetRecordTypeFormat {}
  trait DefaultOaiGetRecordTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.GetRecordType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("GetRecordType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.GetRecordType] =
      (scalaxb.ElemName(targetNamespace, "record")) ^^
      { case p1 =>
      org.smop.oai.GetRecordType(fromXML[org.smop.oai.RecordType](p1)) }
    
    def writesChildNodes(__obj: org.smop.oai.GetRecordType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (toXML[org.smop.oai.RecordType](__obj.record, None, Some("record"), __scope, false))

  }

  override def buildOaiListRecordsTypeFormat = new DefaultOaiListRecordsTypeFormat {}
  trait DefaultOaiListRecordsTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.ListRecordsType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("ListRecordsType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.ListRecordsType] =
      rep(scalaxb.ElemName(targetNamespace, "record")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "resumptionToken")) ^^
      { case p1 ~ p2 =>
      org.smop.oai.ListRecordsType(p1.toSeq map { fromXML[org.smop.oai.RecordType](_) },
        p2.headOption map { fromXML[org.smop.oai.ResumptionTokenType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.ListRecordsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.record flatMap { toXML[org.smop.oai.RecordType](_, None, Some("record"), __scope, false) },
        __obj.resumptionToken map { toXML[org.smop.oai.ResumptionTokenType](_, None, Some("resumptionToken"), __scope, false) } getOrElse {Nil})

  }

  override def buildOaiListIdentifiersTypeFormat = new DefaultOaiListIdentifiersTypeFormat {}
  trait DefaultOaiListIdentifiersTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.ListIdentifiersType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("ListIdentifiersType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.ListIdentifiersType] =
      rep(scalaxb.ElemName(targetNamespace, "header")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "resumptionToken")) ^^
      { case p1 ~ p2 =>
      org.smop.oai.ListIdentifiersType(p1.toSeq map { fromXML[org.smop.oai.HeaderType](_) },
        p2.headOption map { fromXML[org.smop.oai.ResumptionTokenType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.ListIdentifiersType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.header flatMap { toXML[org.smop.oai.HeaderType](_, None, Some("header"), __scope, false) },
        __obj.resumptionToken map { toXML[org.smop.oai.ResumptionTokenType](_, None, Some("resumptionToken"), __scope, false) } getOrElse {Nil})

  }

  override def buildOaiRecordTypeFormat = new DefaultOaiRecordTypeFormat {}
  trait DefaultOaiRecordTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.RecordType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("recordType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.RecordType] =
      (scalaxb.ElemName(targetNamespace, "header")) ~ 
      opt(scalaxb.ElemName(targetNamespace, "metadata")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "about")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.smop.oai.RecordType(fromXML[org.smop.oai.HeaderType](p1),
        p2.headOption map { fromXML[org.smop.oai.MetadataType](_) },
        p3.toSeq map { fromXML[org.smop.oai.AboutType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.RecordType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[org.smop.oai.HeaderType](__obj.header, None, Some("header"), __scope, false),
        __obj.metadata map { toXML[org.smop.oai.MetadataType](_, None, Some("metadata"), __scope, false) } getOrElse {Nil},
        __obj.about flatMap { toXML[org.smop.oai.AboutType](_, None, Some("about"), __scope, false) })

  }

  override def buildOaiHeaderTypeFormat = new DefaultOaiHeaderTypeFormat {}
  trait DefaultOaiHeaderTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.HeaderType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("headerType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.HeaderType] =
      (scalaxb.ElemName(targetNamespace, "identifier")) ~ 
      (scalaxb.ElemName(targetNamespace, "datestamp")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "setSpec")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.smop.oai.HeaderType(fromXML[java.net.URI](p1),
        fromXML[String](p2),
        p3.toSeq map { fromXML[String](_) },
        (node \ "@status").headOption map { fromXML[org.smop.oai.StatusType](_) }) }
    
    override def writesAttribute(__obj: org.smop.oai.HeaderType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.smop.oai.HeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[java.net.URI](__obj.identifier, None, Some("identifier"), __scope, false),
        toXML[String](__obj.datestamp, None, Some("datestamp"), __scope, false),
        __obj.setSpec flatMap { toXML[String](_, None, Some("setSpec"), __scope, false) })

  }

  def buildOaiStatusTypeFormat = new DefaultOaiStatusTypeFormat {}
  trait DefaultOaiStatusTypeFormat extends scalaxb.XMLFormat[org.smop.oai.StatusType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.StatusType] = Right(org.smop.oai.StatusType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.StatusType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  override def buildOaiMetadataTypeFormat = new DefaultOaiMetadataTypeFormat {}
  trait DefaultOaiMetadataTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.MetadataType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("metadataType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.MetadataType] =
      (any) ^^
      { case p1 =>
      org.smop.oai.MetadataType(fromXML[scalaxb.DataRecord[Any]](p1)) }
    
    def writesChildNodes(__obj: org.smop.oai.MetadataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (toXML[scalaxb.DataRecord[Any]](__obj.any, Some("http://scalaxb.org/internal"), __obj.any.key, __scope, true))

  }

  override def buildOaiAboutTypeFormat = new DefaultOaiAboutTypeFormat {}
  trait DefaultOaiAboutTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.AboutType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("aboutType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.AboutType] =
      (any) ^^
      { case p1 =>
      org.smop.oai.AboutType(fromXML[scalaxb.DataRecord[Any]](p1)) }
    
    def writesChildNodes(__obj: org.smop.oai.AboutType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (toXML[scalaxb.DataRecord[Any]](__obj.any, Some("http://scalaxb.org/internal"), __obj.any.key, __scope, true))

  }

  override def buildOaiResumptionTokenTypeFormat = new DefaultOaiResumptionTokenTypeFormat {}
  trait DefaultOaiResumptionTokenTypeFormat extends scalaxb.XMLFormat[org.smop.oai.ResumptionTokenType] with scalaxb.CanWriteChildNodes[org.smop.oai.ResumptionTokenType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.ResumptionTokenType] = seq match {
      case node: scala.xml.Node => Right(org.smop.oai.ResumptionTokenType(fromXML[String](node),
        (node \ "@expirationDate").headOption map { fromXML[javax.xml.datatype.XMLGregorianCalendar](_) },
        (node \ "@completeListSize").headOption map { fromXML[Int](_) },
        (node \ "@cursor").headOption map { fromXML[Int](_) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.smop.oai.ResumptionTokenType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.expirationDate foreach { x => attr = scala.xml.Attribute(null, "expirationDate", x.toString, attr) }
      __obj.completeListSize foreach { x => attr = scala.xml.Attribute(null, "completeListSize", x.toString, attr) }
      __obj.cursor foreach { x => attr = scala.xml.Attribute(null, "cursor", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.smop.oai.ResumptionTokenType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  override def buildOaiDescriptionTypeFormat = new DefaultOaiDescriptionTypeFormat {}
  trait DefaultOaiDescriptionTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.DescriptionType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("descriptionType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.DescriptionType] =
      (any) ^^
      { case p1 =>
      org.smop.oai.DescriptionType(fromXML[scalaxb.DataRecord[Any]](p1)) }
    
    def writesChildNodes(__obj: org.smop.oai.DescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (toXML[scalaxb.DataRecord[Any]](__obj.any, Some("http://scalaxb.org/internal"), __obj.any.key, __scope, true))

  }

  def buildOaiProtocolVersionTypeFormat = new DefaultOaiProtocolVersionTypeFormat {}
  trait DefaultOaiProtocolVersionTypeFormat extends scalaxb.XMLFormat[org.smop.oai.ProtocolVersionType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.ProtocolVersionType] = Right(org.smop.oai.ProtocolVersionType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.ProtocolVersionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildOaiDeletedRecordTypeFormat = new DefaultOaiDeletedRecordTypeFormat {}
  trait DefaultOaiDeletedRecordTypeFormat extends scalaxb.XMLFormat[org.smop.oai.DeletedRecordType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.DeletedRecordType] = Right(org.smop.oai.DeletedRecordType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.DeletedRecordType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildOaiGranularityTypeFormat = new DefaultOaiGranularityTypeFormat {}
  trait DefaultOaiGranularityTypeFormat extends scalaxb.XMLFormat[org.smop.oai.GranularityType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    def reads(seq: scala.xml.NodeSeq): Either[String, org.smop.oai.GranularityType] = Right(org.smop.oai.GranularityType.fromString(seq.text))
    
    def writes(__obj: org.smop.oai.GranularityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  override def buildOaiMetadataFormatTypeFormat = new DefaultOaiMetadataFormatTypeFormat {}
  trait DefaultOaiMetadataFormatTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.MetadataFormatType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("metadataFormatType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.MetadataFormatType] =
      (scalaxb.ElemName(targetNamespace, "metadataPrefix")) ~ 
      (scalaxb.ElemName(targetNamespace, "schema")) ~ 
      (scalaxb.ElemName(targetNamespace, "metadataNamespace")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.smop.oai.MetadataFormatType(fromXML[String](p1),
        fromXML[java.net.URI](p2),
        fromXML[java.net.URI](p3)) }
    
    def writesChildNodes(__obj: org.smop.oai.MetadataFormatType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[String](__obj.metadataPrefix, None, Some("metadataPrefix"), __scope, false),
        toXML[java.net.URI](__obj.schema, None, Some("schema"), __scope, false),
        toXML[java.net.URI](__obj.metadataNamespace, None, Some("metadataNamespace"), __scope, false))

  }

  override def buildOaiSetTypeFormat = new DefaultOaiSetTypeFormat {}
  trait DefaultOaiSetTypeFormat extends scalaxb.ElemNameParser[org.smop.oai.SetType] {
    val targetNamespace: Option[String] = Some("http://www.openarchives.org/OAI/2.0/")
    
    override def typeName: Option[String] = Some("setType")

    def parser(node: scala.xml.Node): Parser[org.smop.oai.SetType] =
      (scalaxb.ElemName(targetNamespace, "setSpec")) ~ 
      (scalaxb.ElemName(targetNamespace, "setName")) ~ 
      rep(scalaxb.ElemName(targetNamespace, "setDescription")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.smop.oai.SetType(fromXML[String](p1),
        fromXML[String](p2),
        p3.toSeq map { fromXML[org.smop.oai.DescriptionType](_) }) }
    
    def writesChildNodes(__obj: org.smop.oai.SetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(toXML[String](__obj.setSpec, None, Some("setSpec"), __scope, false),
        toXML[String](__obj.setName, None, Some("setName"), __scope, false),
        __obj.setDescription flatMap { toXML[org.smop.oai.DescriptionType](_, None, Some("setDescription"), __scope, false) })

  }


}

